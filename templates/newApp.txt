from PyQt5.QtWidgets import (QMainWindow, QApplication, QAction, QFileDialog, 
                            QVBoxLayout, QWidget)
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt, QSize, QDir, QFileInfo, QStandardPaths

class mainWin(QMainWindow):
    def __init__(self, parent = None):
        super(mainWin, self).__init__(parent)
        self.setupUI()
        self.setupToolbar()
        self.setupStatusbar()
        
    def setupUI(self):
        self.setGeometry(0, 0, 800, 600)
        self.vbox = QVBoxLayout()
        self.cwid = QWidget()
        self.cwid.setLayout(self.vbox)
        self.setCentralWidget(self.cwid)
        self.setStyleSheet(myStyleSheet(self))
        
        
    def setupToolbar(self):
        tb = self.addToolBar("File")
        tb.setIconSize(QSize(16, 16))
        tb.setContextMenuPolicy(Qt.PreventContextMenu)
        tb.setFloatable(False)
        tb.setMovable(False)
        tb.addAction(QIcon.fromTheme('document-new'), "New", self.newFile)
        tb.addAction(QIcon.fromTheme('document-open'), "Open", self.openFile)
        tb.addAction(QIcon.fromTheme('document-save'), "Save", self.saveFile)
        tb.addAction(QIcon.fromTheme('document-save-as'), "Save as ...", self.saveFileAs)
        
    def setupStatusbar(self):
        self.sbar = self.statusBar()
        self.sbar.showMessage("Ready", 0)
        
    def newFile(self):
        print("newFile")
        self.setWindowTitle("New")

    def saveFileAs(self, path=None):
        if not path:
            documents = f"{QStandardPaths.standardLocations(QStandardPaths.DocumentsLocation)[0]}/"
            path, _ = QFileDialog.getSaveFileName(self, "Save File", 
                        documents + self.windowTitle() + ".txt","Text Files (*.txt;;All Files (*.*)")
        if path:
            print(path)
        
    def saveFile(self):
        print("saveFile")
        
    def openFile(self, path=None):
        if not path:
            documents = f"{QStandardPaths.standardLocations(QStandardPaths.DocumentsLocation)[0]}/"
            path, _ = QFileDialog.getOpenFileName(self, "Open File", 
                        documents,"Text Files (*.txt;;All Files (*.*)")
        if path:
            print(path)
            self.setWindowTitle(QFileInfo(path).baseName())
            
    def keyPressEvent(self, event):
        if event.modifiers() == (Qt.ControlModifier | Qt.ShiftModifier):
            if event.key() == Qt.Key_S:
                self.saveFileAs()
        elif event.modifiers() == Qt.ControlModifier:
            if event.key() == Qt.Key_N:
                self.newFile()
            if event.key() == Qt.Key_O:
                self.openFile()
            if event.key() == Qt.Key_S:
                self.saveFile()
        else:
            event.accept()
            
def myStyleSheet(self):
    return """
QTextEdit
{
background: #eeeeec;
color: #202020;
}
QStatusBar
{
font-size: 8pt;
color: #555753;
}
QMenuBar
{
background: transparent;
border: 0px;
}
QToolBar
{
background: transparent;
border: 0px;
}
QMainWindow
{
     background: qlineargradient(y1: 0, y2: 1,
                                 stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,
                                 stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);
}
QLineEdit
{
     background: qlineargradient(y1: 0, y2: 1,
                                 stop: 0 #E1E1E1, stop: 0.4 #e5e5e5,
                                 stop: 0.5 #e9e9e9, stop: 1.0 #d2d2d2);
}
QPushButton
{
background: #D8D8D8;
}
QToolButton::hover
{
background: #729fcf;
}
    """       
  
        
if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    win = mainWin()
    win.setWindowTitle("Main Window")
    win.show()

    sys.exit(app.exec_())